// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Backend.Migrations
{
    [DbContext(typeof(MySqlContext))]
    [Migration("20201128093637_FifthMigration")]
    partial class FifthMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend.Examinations.Model.EmergencyRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("SideNotes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfAppointment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("EmergencyRequests");
                });

            modelBuilder.Entity("Backend.Examinations.Model.ExaminationSurgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DoctorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("ExaminationSurgeries");
                });

            modelBuilder.Entity("Backend.Examinations.Model.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ExaminationSurgeryId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationSurgeryId");

                    b.ToTable("Treatments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Treatment");
                });

            modelBuilder.Entity("Backend.Medications.Model.Allergens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Allergen")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("MedicationId");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergen = "Polen",
                            MedicalRecordId = 1,
                            MedicationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Allergen = "Prasina",
                            MedicalRecordId = 1,
                            MedicationId = 2
                        });
                });

            modelBuilder.Entity("Backend.Medications.Model.DosageOfIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationIngredientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("MedicationIngredientId");

                    b.ToTable("DosageOfIngredient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100.0,
                            MedicationId = 1,
                            MedicationIngredientId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 120.0,
                            MedicationId = 1,
                            MedicationIngredientId = 2
                        });
                });

            modelBuilder.Entity("Backend.Medications.Model.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Dosage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Med")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("RoomId");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Famar",
                            Dosage = "400mg",
                            Med = "Brufen",
                            MedicalRecordId = 0,
                            MedicationCategoryId = 1,
                            Quantity = 10,
                            RoomId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Company = "Goodwill",
                            Dosage = "400mg",
                            Med = "Metafex",
                            MedicalRecordId = 0,
                            MedicationCategoryId = 1,
                            Quantity = 15,
                            RoomId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Company = "Goodwill",
                            Dosage = "400mg",
                            Med = "Neoangin",
                            MedicalRecordId = 0,
                            MedicationCategoryId = 1,
                            Quantity = 15,
                            RoomId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Company = "Famar",
                            Dosage = "400mg",
                            Med = "Phlebodia",
                            MedicalRecordId = 0,
                            MedicationCategoryId = 1,
                            Quantity = 15,
                            RoomId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Company = "Goodwill",
                            Dosage = "400mg",
                            Med = "Sirup",
                            MedicalRecordId = 0,
                            MedicationCategoryId = 1,
                            Quantity = 15,
                            RoomId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            Company = "Famar",
                            Dosage = "400mg",
                            Med = "Grafalon",
                            MedicalRecordId = 0,
                            MedicationCategoryId = 1,
                            Quantity = 15,
                            RoomId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            Company = "Goodwill",
                            Dosage = "400mg",
                            Med = "Zalfija",
                            MedicalRecordId = 0,
                            MedicationCategoryId = 1,
                            Quantity = 15,
                            RoomId = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Backend.Medications.Model.MedicationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.ToTable("MedicationCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Kategorija1",
                            MedicationId = 1,
                            SpecializationId = 1
                        });
                });

            modelBuilder.Entity("Backend.Medications.Model.MedicationIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("MedicationIngredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ibuprofen"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Paracetamol"
                        });
                });

            modelBuilder.Entity("Backend.Medications.Model.SideEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("SideEffectsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("SideEffectsId");

                    b.ToTable("SideEffects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Frequency = 2,
                            MedicationId = 1,
                            SideEffectsId = 1
                        },
                        new
                        {
                            Id = 2,
                            Frequency = 1,
                            MedicationId = 1,
                            SideEffectsId = 1
                        });
                });

            modelBuilder.Entity("Backend.Medications.Model.ValidationMed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DateOfValidation")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SideNotes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicationId");

                    b.ToTable("ValidationMeds");
                });

            modelBuilder.Entity("Backend.Records.Model.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ExaminationSurgeryId")
                        .HasColumnType("int");

                    b.Property<int?>("FamilyIllnessHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationSurgeryId");

                    b.HasIndex("FamilyIllnessHistoryId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Diagnoses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MedicalRecordId = 1,
                            Name = "Dijagnoza1"
                        },
                        new
                        {
                            Id = 2,
                            MedicalRecordId = 1,
                            Name = "Dijagnoza2"
                        });
                });

            modelBuilder.Entity("Backend.Records.Model.FamilyIllnessHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelativeMember")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("FamilyIllnessHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MedicalRecordId = 1,
                            RelativeMember = 1
                        },
                        new
                        {
                            Id = 2,
                            MedicalRecordId = 1,
                            RelativeMember = 3
                        });
                });

            modelBuilder.Entity("Backend.Records.Model.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<int>("CurrHealthState")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BloodType = 2,
                            CurrHealthState = 2,
                            PatientId = "2406978890046"
                        });
                });

            modelBuilder.Entity("Backend.Records.Model.Symptoms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiagnosisId = 1,
                            Name = "Kasalj"
                        },
                        new
                        {
                            Id = 2,
                            DiagnosisId = 1,
                            Name = "Temperatura"
                        });
                });

            modelBuilder.Entity("Backend.Records.Model.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HourConsumption")
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("MedicationId");

                    b.ToTable("Therapies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HourConsumption = 6,
                            MedicalRecordId = 1,
                            MedicationId = 1
                        },
                        new
                        {
                            Id = 2,
                            HourConsumption = 10,
                            MedicalRecordId = 1,
                            MedicationId = 2
                        });
                });

            modelBuilder.Entity("Backend.Records.Model.Vaccines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Vaccines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MedicalRecordId = 1,
                            Name = "Grip"
                        },
                        new
                        {
                            Id = 2,
                            MedicalRecordId = 1,
                            Name = "Male boginje"
                        });
                });

            modelBuilder.Entity("Model.Rooms.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CurrentlyFree")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("Model.Rooms.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Floor = 1,
                            HospitalId = 1,
                            Name = "Infektivno"
                        },
                        new
                        {
                            Id = 2,
                            Floor = 1,
                            HospitalId = 2,
                            Name = "Radiology"
                        },
                        new
                        {
                            Id = 3,
                            Floor = 1,
                            HospitalId = 2,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 4,
                            Floor = 1,
                            HospitalId = 2,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 5,
                            Floor = 1,
                            HospitalId = 2,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 6,
                            Floor = 1,
                            HospitalId = 2,
                            Name = "Intensive Care"
                        },
                        new
                        {
                            Id = 7,
                            Floor = 1,
                            HospitalId = 3,
                            Name = "Gastroenterology"
                        },
                        new
                        {
                            Id = 8,
                            Floor = 1,
                            HospitalId = 3,
                            Name = "Hematology"
                        },
                        new
                        {
                            Id = 9,
                            Floor = 1,
                            HospitalId = 3,
                            Name = "Dialysis"
                        },
                        new
                        {
                            Id = 10,
                            Floor = 1,
                            HospitalId = 3,
                            Name = "Rheumatology"
                        },
                        new
                        {
                            Id = 11,
                            Floor = 1,
                            HospitalId = 3,
                            Name = "Infectous Diseases"
                        });
                });

            modelBuilder.Entity("Model.Rooms.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("EquipmentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Krevet"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Metla"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sapun"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Spric"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Papir"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Krpa"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sljivovica za smirenje zivaca"
                        });
                });

            modelBuilder.Entity("Model.Rooms.HospitalEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInRoom")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInStorage")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("RoomId");

                    b.ToTable("HospitalEquipment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EquipmentTypeId = 1,
                            QuantityInRoom = 5,
                            QuantityInStorage = 15,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            EquipmentTypeId = 2,
                            QuantityInRoom = 5,
                            QuantityInStorage = 15,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            EquipmentTypeId = 3,
                            QuantityInRoom = 5,
                            QuantityInStorage = 15,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 4,
                            EquipmentTypeId = 4,
                            QuantityInRoom = 5,
                            QuantityInStorage = 15,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 5,
                            EquipmentTypeId = 5,
                            QuantityInRoom = 5,
                            QuantityInStorage = 15,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 6,
                            EquipmentTypeId = 6,
                            QuantityInRoom = 5,
                            QuantityInStorage = 15,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 7,
                            EquipmentTypeId = 7,
                            QuantityInRoom = 5,
                            QuantityInStorage = 15,
                            RoomId = 4
                        });
                });

            modelBuilder.Entity("Model.Rooms.Renovation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("MoveEquipment")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Renovations");
                });

            modelBuilder.Entity("Model.Rooms.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BedsCapacity")
                        .HasColumnType("int");

                    b.Property<int>("BedsFree")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("RoomLabel")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoomType")
                        .HasColumnType("int");

                    b.Property<string>("RoomUse")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BedsCapacity = 10,
                            BedsFree = 3,
                            DepartmentId = 1,
                            RoomLabel = "F2-G3",
                            RoomNumber = 1,
                            RoomType = 1,
                            RoomUse = "Soba za pregledanje"
                        },
                        new
                        {
                            Id = 2,
                            BedsCapacity = 10,
                            BedsFree = 3,
                            DepartmentId = 2,
                            RoomLabel = "F1-C3",
                            RoomNumber = 2,
                            RoomType = 0,
                            RoomUse = "Soba za pregledanje"
                        },
                        new
                        {
                            Id = 3,
                            BedsCapacity = 10,
                            BedsFree = 3,
                            DepartmentId = 3,
                            RoomLabel = "F1-C5",
                            RoomNumber = 3,
                            RoomType = 2,
                            RoomUse = "Soba za pregledanje"
                        },
                        new
                        {
                            Id = 4,
                            BedsCapacity = 10,
                            BedsFree = 3,
                            DepartmentId = 4,
                            RoomLabel = "F1-R5",
                            RoomNumber = 4,
                            RoomType = 2,
                            RoomUse = "Soba za pregledanje"
                        },
                        new
                        {
                            Id = 5,
                            BedsCapacity = 10,
                            BedsFree = 3,
                            DepartmentId = 5,
                            RoomLabel = "F2-C4",
                            RoomNumber = 5,
                            RoomType = 3,
                            RoomUse = "Soba za pregledanje"
                        },
                        new
                        {
                            Id = 6,
                            BedsCapacity = 10,
                            BedsFree = 3,
                            DepartmentId = 6,
                            RoomLabel = "F1-G1",
                            RoomNumber = 6,
                            RoomType = 3,
                            RoomUse = "Soba za pregledanje"
                        },
                        new
                        {
                            Id = 7,
                            BedsCapacity = 10,
                            BedsFree = 3,
                            DepartmentId = 7,
                            RoomLabel = "F2-C2",
                            RoomNumber = 7,
                            RoomType = 0,
                            RoomUse = "Soba za pregledanje"
                        },
                        new
                        {
                            Id = 8,
                            BedsCapacity = 10,
                            BedsFree = 3,
                            DepartmentId = 8,
                            RoomLabel = "F1-R2",
                            RoomNumber = 8,
                            RoomType = 1,
                            RoomUse = "Soba za pregledanje"
                        });
                });

            modelBuilder.Entity("Model.Schedule.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Finished")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TypeOfAppointment")
                        .HasColumnType("int");

                    b.Property<bool>("Urgent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WeeklyAppointmentReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("RoomId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Model.Users.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Apartment")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apartment = 0,
                            CityId = 21000,
                            Floor = 0,
                            Number = 4,
                            Street = "Radnicka"
                        },
                        new
                        {
                            Id = 2,
                            Apartment = 0,
                            CityId = 11000,
                            Floor = 0,
                            Number = 5,
                            Street = "Gospodara Vucica"
                        },
                        new
                        {
                            Id = 3,
                            Apartment = 0,
                            CityId = 11000,
                            Floor = 0,
                            Number = 28,
                            Street = "Stefana Nemanje"
                        },
                        new
                        {
                            Id = 4,
                            Apartment = 0,
                            CityId = 11000,
                            Floor = 0,
                            Number = 27,
                            Street = "Stefana Nemanje"
                        });
                });

            modelBuilder.Entity("Model.Users.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Image")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PostContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PostContentId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Model.Users.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 21000,
                            Name = "Novi Sad",
                            StateId = 1L
                        },
                        new
                        {
                            Id = 11000,
                            Name = "Beograd",
                            StateId = 1L
                        });
                });

            modelBuilder.Entity("Model.Users.DoctorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfReview")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorReviews");
                });

            modelBuilder.Entity("Model.Users.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("AllowedForPublishing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Anonymous")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("RegisteredUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalNotes = "Sve je super!",
                            AllowedForPublishing = true,
                            Anonymous = false,
                            Approved = true,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0,
                            RegisteredUserId = "2406978890045"
                        },
                        new
                        {
                            Id = 2,
                            AdditionalNotes = "Bolnica je veoma losa, bas sam razocaran! Rupe u zidovima, voda curi na sve strane, treba vas zatvoriti!!!",
                            AllowedForPublishing = true,
                            Anonymous = false,
                            Approved = false,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0,
                            RegisteredUserId = "2406978890045"
                        },
                        new
                        {
                            Id = 3,
                            AdditionalNotes = "Predivno, ali i ruzno! Sramite se! Cestitke... <3",
                            AllowedForPublishing = false,
                            Anonymous = false,
                            Approved = false,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0,
                            RegisteredUserId = "2406978890045"
                        },
                        new
                        {
                            Id = 4,
                            AdditionalNotes = "Odlicno!",
                            AllowedForPublishing = false,
                            Anonymous = false,
                            Approved = false,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 0,
                            RegisteredUserId = "2406978890045"
                        });
                });

            modelBuilder.Entity("Model.Users.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Description = "blablal",
                            Name = "Medbay"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 3,
                            Description = "Nebitno 1",
                            Name = "Hospital 1"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 4,
                            Description = "Nebitno 2",
                            Name = "Hospital 2"
                        });
                });

            modelBuilder.Entity("Model.Users.InsurancePolicy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Company")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("InsurancePolicies");

                    b.HasData(
                        new
                        {
                            Id = "policy1",
                            Company = "Dunav osiguranje d.o.o"
                        });
                });

            modelBuilder.Entity("Model.Users.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NotificationCategory")
                        .HasColumnType("int");

                    b.Property<string>("RegisteredUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Model.Users.PostContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContentTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PostContents");
                });

            modelBuilder.Entity("Model.Users.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("FrequentlyAsked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PostContentId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionReplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostContentId");

                    b.HasIndex("QuestionReplyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Model.Users.QuestionReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("QuestionReplies");
                });

            modelBuilder.Entity("Model.Users.RegisteredUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("CurrResidenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("InsurancePolicyId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlaceOfBirthId")
                        .HasColumnType("int");

                    b.Property<string>("Profession")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CurrResidenceId");

                    b.HasIndex("InsurancePolicyId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("PlaceOfBirthId");

                    b.ToTable("RegisteredUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RegisteredUser");

                    b.HasData(
                        new
                        {
                            Id = "2406978890045",
                            CurrResidenceId = 1,
                            DateOfBirth = new DateTime(1978, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 2,
                            Email = "marko@gmail.com",
                            Gender = 0,
                            InsurancePolicyId = "policy1",
                            Name = "Marko",
                            Password = "marko1978",
                            Phone = "065/123-4554",
                            PlaceOfBirthId = 11000,
                            Profession = "vodoinstalater",
                            ProfileImage = ".",
                            Surname = "Markovic",
                            Username = "markic"
                        });
                });

            modelBuilder.Entity("Model.Users.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DoctorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SpecializationName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = "2406978890047",
                            SpecializationName = "Interna medicina"
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = "2406978890047",
                            SpecializationName = "Hirurgija"
                        });
                });

            modelBuilder.Entity("Model.Users.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Serbia"
                        });
                });

            modelBuilder.Entity("Model.Users.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("AverageGrade")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Model.Users.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("Model.Users.VacationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ReasonForVacation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("VacationRequests");
                });

            modelBuilder.Entity("Model.Users.WorkDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkDays");
                });

            modelBuilder.Entity("Backend.Examinations.Model.HospitalTreatment", b =>
                {
                    b.HasBaseType("Backend.Examinations.Model.Treatment");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("HospitalTreatment");
                });

            modelBuilder.Entity("Backend.Examinations.Model.Prescription", b =>
                {
                    b.HasBaseType("Backend.Examinations.Model.Treatment");

                    b.Property<int>("HourlyIntake")
                        .HasColumnType("int");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("tinyint(1)");

                    b.HasIndex("MedicationId");

                    b.HasDiscriminator().HasValue("Prescription");
                });

            modelBuilder.Entity("Model.Users.Employee", b =>
                {
                    b.HasBaseType("Model.Users.RegisteredUser");

                    b.Property<string>("Biography")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("CurrentlyWorking")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("VacationLeave")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WorkersID")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Model.Users.Manager", b =>
                {
                    b.HasBaseType("Model.Users.RegisteredUser");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("Model.Users.Patient", b =>
                {
                    b.HasBaseType("Model.Users.RegisteredUser");

                    b.Property<string>("ChosenDoctorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsGuestAccount")
                        .HasColumnType("tinyint(1)");

                    b.HasIndex("ChosenDoctorId");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = "2406978890046",
                            CurrResidenceId = 1,
                            DateOfBirth = new DateTime(1978, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 2,
                            Email = "pera@gmail.com",
                            Gender = 0,
                            InsurancePolicyId = "policy1",
                            Name = "Petar",
                            Password = "pera1978",
                            Phone = "065/123-4554",
                            PlaceOfBirthId = 11000,
                            Profession = "vodoinstalater",
                            ProfileImage = ".",
                            Surname = "Petrovic",
                            Username = "pera",
                            ChosenDoctorId = "2406978890047",
                            IsGuestAccount = false
                        });
                });

            modelBuilder.Entity("Model.Users.Doctor", b =>
                {
                    b.HasBaseType("Model.Users.Employee");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ExaminationRoomId")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("OnCall")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OperationRoomId")
                        .HasColumnType("int");

                    b.Property<double>("PatientReview")
                        .HasColumnType("double");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ExaminationRoomId");

                    b.HasIndex("OperationRoomId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = "2406978890047",
                            CurrResidenceId = 1,
                            DateOfBirth = new DateTime(1978, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 2,
                            Email = "mika@gmail.com",
                            Gender = 0,
                            InsurancePolicyId = "policy1",
                            Name = "Milan",
                            Password = "mika1978",
                            Phone = "065/123-4554",
                            PlaceOfBirthId = 11000,
                            Profession = "vodoinstalater",
                            ProfileImage = ".",
                            Surname = "Milanovic",
                            Username = "mika",
                            CurrentlyWorking = false,
                            VacationLeave = false,
                            WorkersID = 0,
                            DepartmentId = 1,
                            ExaminationRoomId = 1,
                            LicenseNumber = "001",
                            OnCall = true,
                            OperationRoomId = 2,
                            PatientReview = 4.5
                        });
                });

            modelBuilder.Entity("Model.Users.Secretary", b =>
                {
                    b.HasBaseType("Model.Users.Employee");

                    b.HasDiscriminator().HasValue("Secretary");
                });

            modelBuilder.Entity("Backend.Examinations.Model.EmergencyRequest", b =>
                {
                    b.HasOne("Backend.Records.Model.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Examinations.Model.ExaminationSurgery", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Backend.Records.Model.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Examinations.Model.Treatment", b =>
                {
                    b.HasOne("Backend.Examinations.Model.ExaminationSurgery", "ExaminationSurgery")
                        .WithMany("Treatments")
                        .HasForeignKey("ExaminationSurgeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Medications.Model.Allergens", b =>
                {
                    b.HasOne("Backend.Records.Model.MedicalRecord", "MedicalRecord")
                        .WithMany("Allergies")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Medications.Model.Medication", "Medication")
                        .WithMany("Allergens")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Medications.Model.DosageOfIngredient", b =>
                {
                    b.HasOne("Backend.Medications.Model.Medication", "Medication")
                        .WithMany("MedicationContent")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Medications.Model.MedicationIngredient", "MedicationIngredient")
                        .WithMany()
                        .HasForeignKey("MedicationIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Medications.Model.Medication", b =>
                {
                    b.HasOne("Backend.Medications.Model.Medication", null)
                        .WithMany("AlternativeMedication")
                        .HasForeignKey("MedicationId");

                    b.HasOne("Model.Rooms.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Medications.Model.MedicationCategory", b =>
                {
                    b.HasOne("Backend.Medications.Model.Medication", "Medication")
                        .WithOne("MedicationCategory")
                        .HasForeignKey("Backend.Medications.Model.MedicationCategory", "MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Medications.Model.SideEffect", b =>
                {
                    b.HasOne("Backend.Medications.Model.Medication", "Medication")
                        .WithMany("SideEffects")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Records.Model.Symptoms", "SideEffects")
                        .WithMany()
                        .HasForeignKey("SideEffectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Medications.Model.ValidationMed", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Backend.Medications.Model.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Records.Model.Diagnosis", b =>
                {
                    b.HasOne("Backend.Examinations.Model.ExaminationSurgery", null)
                        .WithMany("Diagnoses")
                        .HasForeignKey("ExaminationSurgeryId");

                    b.HasOne("Backend.Records.Model.FamilyIllnessHistory", null)
                        .WithMany("Diagnosis")
                        .HasForeignKey("FamilyIllnessHistoryId");

                    b.HasOne("Backend.Records.Model.MedicalRecord", null)
                        .WithMany("IllnessHistory")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Records.Model.FamilyIllnessHistory", b =>
                {
                    b.HasOne("Backend.Records.Model.MedicalRecord", null)
                        .WithMany("FamilyIllnessHistory")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Records.Model.MedicalRecord", b =>
                {
                    b.HasOne("Model.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Backend.Records.Model.Symptoms", b =>
                {
                    b.HasOne("Backend.Records.Model.Diagnosis", null)
                        .WithMany("Symptoms")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Records.Model.Therapy", b =>
                {
                    b.HasOne("Backend.Records.Model.MedicalRecord", null)
                        .WithMany("Therapies")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Medications.Model.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Records.Model.Vaccines", b =>
                {
                    b.HasOne("Backend.Records.Model.MedicalRecord", null)
                        .WithMany("Vaccines")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Rooms.Bed", b =>
                {
                    b.HasOne("Model.Rooms.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Rooms.Department", b =>
                {
                    b.HasOne("Model.Users.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Rooms.HospitalEquipment", b =>
                {
                    b.HasOne("Model.Rooms.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Rooms.Room", "Room")
                        .WithMany("HospitalEquipment")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Rooms.Renovation", b =>
                {
                    b.HasOne("Model.Rooms.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Rooms.Room", b =>
                {
                    b.HasOne("Model.Rooms.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Schedule.Appointment", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Backend.Records.Model.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Rooms.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.Address", b =>
                {
                    b.HasOne("Model.Users.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.Article", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Model.Users.PostContent", "PostContent")
                        .WithMany()
                        .HasForeignKey("PostContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.City", b =>
                {
                    b.HasOne("Model.Users.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.DoctorReview", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Model.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Model.Users.Feedback", b =>
                {
                    b.HasOne("Model.Users.RegisteredUser", "RegisteredUser")
                        .WithMany()
                        .HasForeignKey("RegisteredUserId");
                });

            modelBuilder.Entity("Model.Users.Hospital", b =>
                {
                    b.HasOne("Model.Users.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.Notification", b =>
                {
                    b.HasOne("Model.Users.RegisteredUser", "RegisteredUser")
                        .WithMany()
                        .HasForeignKey("RegisteredUserId");
                });

            modelBuilder.Entity("Model.Users.Question", b =>
                {
                    b.HasOne("Model.Users.Patient", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Model.Users.PostContent", "PostContent")
                        .WithMany()
                        .HasForeignKey("PostContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.QuestionReply", "QuestionReply")
                        .WithMany()
                        .HasForeignKey("QuestionReplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.QuestionReply", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("Model.Users.RegisteredUser", b =>
                {
                    b.HasOne("Model.Users.Address", "CurrResidence")
                        .WithMany()
                        .HasForeignKey("CurrResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Users.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("InsurancePolicyId");

                    b.HasOne("Model.Users.Notification", null)
                        .WithMany("NotificationTo")
                        .HasForeignKey("NotificationId");

                    b.HasOne("Model.Users.City", "PlaceOfBirth")
                        .WithMany()
                        .HasForeignKey("PlaceOfBirthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.Specialization", b =>
                {
                    b.HasOne("Model.Users.Doctor", null)
                        .WithMany("Specializations")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("Model.Users.Survey", b =>
                {
                    b.HasOne("Model.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Model.Users.SurveyQuestion", b =>
                {
                    b.HasOne("Model.Users.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.VacationRequest", b =>
                {
                    b.HasOne("Model.Users.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Model.Users.WorkDay", b =>
                {
                    b.HasOne("Model.Users.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Backend.Examinations.Model.HospitalTreatment", b =>
                {
                    b.HasOne("Model.Rooms.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Examinations.Model.Prescription", b =>
                {
                    b.HasOne("Backend.Medications.Model.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Users.Patient", b =>
                {
                    b.HasOne("Model.Users.Doctor", "ChosenDoctor")
                        .WithMany()
                        .HasForeignKey("ChosenDoctorId");
                });

            modelBuilder.Entity("Model.Users.Doctor", b =>
                {
                    b.HasOne("Model.Rooms.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Rooms.Room", "ExaminationRoom")
                        .WithMany()
                        .HasForeignKey("ExaminationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Rooms.Room", "OperationRoom")
                        .WithMany()
                        .HasForeignKey("OperationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
