version: "3.8"

volumes:
  postgres-data: {}

networks:
  demo:
    name: demo
    driver: bridge

services: 
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    networks:
      - demo
    environment:
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "user"
      POSTGRES_DB: mydb1
    volumes:
      - postgres-data:/var/lib/postgres

  # webintegrationtests:
  #     build:
  #       context: .
  #       dockerfile: Dockerfile.WebAppIntegrationTests
  #     container_name: webintegrationtests
  #     restart: on-failure
  #     depends_on:
  #       - postgres
  #     environment:
  #       DATABASE_USERNAME: "user"
  #       DATABASE_PASSWORD: "user"
  #       DATABASE_HOST: "postgres"
  #       DATABASE_TYPE: "postgres"
  #       DATABASE_SCHEMA: "mydb1"
  #       STAGE: "test"
  #       URL_MEDICATION: "medications"
  #       PORT_MEDICATION: "5007"
  #       URL_DOCUMENTS: "patientdocuments"
  #       PORT_DOCUMENTS: "5006"
  #       PORT_USERS: "5002"
  #       URL_USERS: "users"
  #       PORT_APPOINTMENT: "5008"
  #       URL_APPOINTMENT: "appointment"
  #       PORT_ROOMS: "5004"
  #       URL_ROOMS: "rooms"
  #     expose: 
  #       - "81"
  #     networks: 
  #       - demo
  #     volumes:
  #     - postgres-data:/var/lib/postgres:rw

  pharmacyintegrationtests:
    build:
      context: .
      dockerfile: Dockerfile.PhIntegrationTests
    container_name: pharmacy_integration_tests
    restart: on-failure
    depends_on:
      - postgres
    environment:
      DATABASE_USERNAME: "user"
      DATABASE_PASSWORD: "user"
      DATABASE_HOST: "postgres"
      DATABASE_TYPE: "postgres"
      DATABASE_SCHEMA: "mydb1"
      STAGE: "test"
      URL_MEDICATION: "medications"
      PORT_MEDICATION: "5007"
      URL_DOCUMENTS: "patientdocuments"
      PORT_DOCUMENTS: "5006"
      URL_PHARMACIES: "pharmacies"
      PORT_PHARMACIES: "50202"
    expose: 
       - "80"
    networks: 
      - demo
    volumes:
      - postgres-data:/var/lib/postgres:rw
  
  feedback:
    build:
      context: .
      dockerfile: Dockerfile.Feedback
    container_name: feedback_container
    restart: on-failure
    networks:
      - demo
    depends_on:
      - postgres
    environment:
      DATABASE_USERNAME: "user"
      DATABASE_PASSWORD: "user"
      DATABASE_HOST: "postgres"
      DATABASE_TYPE: "postgres"
      DATABASE_SCHEMA: "mydb1"
      STAGE: "test"
      PORT: "5003"
      PORT_USERS: "5002"
      URL_USERS: "users"
    ports:
      - "8080:5003"
    volumes:
      - postgres-data:/var/lib/postgres:rw

  
  pharmacies:
    build:
      context: .
      dockerfile: Dockerfile.Pharmacies
    container_name: pharmacy_container
    restart: on-failure
    networks:
      - demo
    depends_on:
      - postgres
    environment:
      DATABASE_USERNAME: "user"
      DATABASE_PASSWORD: "user"
      DATABASE_HOST: "postgres"
      DATABASE_TYPE: "postgres"
      DATABASE_SCHEMA: "mydb1"
      STAGE: "test"
      PORT: "50202"
      URL_MEDICATION: "medications"
      PORT_MEDICATION: "5007"
      URL_DOCUMENTS: "patientdocuments"
      PORT_DOCUMENTS: "5006"
    ports:
      - "50202:50202"
    volumes:
      - postgres-data:/var/lib/postgres:rw
  tenders:
    build:
      context: .
      dockerfile: Dockerfile.Tenders
    container_name: tenders_container
    restart: on-failure
    networks:
      - demo
    depends_on:
      - postgres
    environment:
      DATABASE_USERNAME: "user"
      DATABASE_PASSWORD: "user"
      DATABASE_HOST: "postgres"
      DATABASE_TYPE: "postgres"
      DATABASE_SCHEMA: "mydb1"
      STAGE: "test"
      PORT: "5000"
      URL_MEDICATION: "medications"
      PORT_MEDICATION: "5007"
      URL_DOCUMENTS: "patientdocuments"
      PORT_DOCUMENTS: "5006"
      URL_PHARMACIES: "pharmacies"
      PORT_PHARMACIES: "50202"
    ports:
      - "49835:5000"
    volumes:
      - postgres-data:/var/lib/postgres:rw

  medications:
    build:
      context: .
      dockerfile: Dockerfile.Medications
    container_name: medications_container
    restart: on-failure
    networks:
      - demo
    depends_on:
      - postgres
    environment:
      DATABASE_USERNAME: "user"
      DATABASE_PASSWORD: "user"
      DATABASE_HOST: "postgres"
      DATABASE_TYPE: "postgres"
      DATABASE_SCHEMA: "mydb1"
      STAGE: "test"
      PORT: "5007"
    ports:
      - "56764:5007"
    volumes:
      - postgres-data:/var/lib/postgres:rw

  rooms:
    build:
      context: .
      dockerfile: Dockerfile.Rooms
    container_name: rooms_container
    restart: on-failure
    networks:
      - demo
    depends_on:
      - postgres
    environment:
      DATABASE_USERNAME: "user"
      DATABASE_PASSWORD: "user"
      DATABASE_HOST: "postgres"
      DATABASE_TYPE: "postgres"
      DATABASE_SCHEMA: "mydb1"
      STAGE: "test"
      PORT: "5004"
      PORT_USERS: "5002"
      URL_USERS: "users"
    ports:
      - "60304:5004"
    volumes:
      - postgres-data:/var/lib/postgres:rw

  users:
    build:
      context: .
      dockerfile: Dockerfile.Users
    container_name: users_container
    restart: on-failure
    networks:
      - demo
    depends_on:
      - postgres
    environment:
      DATABASE_USERNAME: "user"
      DATABASE_PASSWORD: "user"
      DATABASE_HOST: "postgres"
      DATABASE_TYPE: "postgres"
      DATABASE_SCHEMA: "mydb1"
      STAGE: "test"
      PORT: "5002"
      PORT_APPOINTMENT: "5008"
      URL_APPOINTMENT: "appointment"
    ports:
      - "8081:5002"
    volumes:
      - postgres-data:/var/lib/postgres:rw
  
  patientdocuments:
    build:
      context: .
      dockerfile: Dockerfile.PatientDocuments
    container_name: documents_container
    restart: on-failure
    networks:
      - demo
    depends_on:
      - postgres
    environment:
      DATABASE_USERNAME: "user"
      DATABASE_PASSWORD: "user"
      DATABASE_HOST: "postgres"
      DATABASE_TYPE: "postgres"
      DATABASE_SCHEMA: "mydb1"
      STAGE: "test"
      PORT: "5006"
      PORT_USERS: "5002"
      URL_USERS: "users"
    ports:
      - "8088:5006"
    volumes:
      - postgres-data:/var/lib/postgres:rw

  appointment:
    build:
      context: .
      dockerfile: Dockerfile.Appointment
    container_name: appointment_container
    restart: on-failure
    networks:
      - demo
    depends_on:
      - postgres
    environment:
      DATABASE_USERNAME: "user"
      DATABASE_PASSWORD: "user"
      DATABASE_HOST: "postgres"
      DATABASE_TYPE: "postgres"
      DATABASE_SCHEMA: "mydb1"
      STAGE: "test"
      PORT: "5008"
      PORT_ROOMS: "5004"
      URL_ROOMS: "rooms"
      PORT_USERS: "5002"
      URL_USERS: "users"
    ports:
      - "8083:5008"
    volumes:
      - postgres-data:/var/lib/postgres:rw
